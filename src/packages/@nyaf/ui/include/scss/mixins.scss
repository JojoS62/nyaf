@import 'vars';

@function unit($val, $unit) {
  @if not($unit) {
    @return $val;
  }
  @else {
    @return $val + #{$unit};
  }
}

@mixin show-element() {
  //display: initial;
  opacity: 1;
  @include scale(1);
}

@mixin hide-element() {
  @include scale(0);
  opacity: 0;
  //display: none;
}

@mixin debug() {
  outline: 1px dotted red !important;
  min-width: 1px;
  min-height: 1px;
}

@mixin clear() {
  &::after {
    display: block;
    clear: both;
    content: '';
  }
}

@mixin set-relative() {
  display: block;
  position: relative;
}

@mixin set-absolute() {
  position: absolute;
}

@mixin set-flex() {
  display: flex;
}

@mixin reset-list() {
  list-style: none inside;
  margin: 0;
  padding: 0;
  position: relative;
}

@function _px2rem($unit, $rest...){
  $result: ();
  @each $i in $rest {
      $result: append($result, unit($i / 16, $unit));
  }
  @return $result;
}

@mixin px2rem($attr: width, $size: 16, $rest...) {
  #{$attr}: _px2rem(rem, $size, $rest...);
}

@function _rem2px($unit, $rest...){
  $result: ();
  @each $i in $rest {
      $result: append($result, unit(16 * $i, $unit));
  }
  @return $result;
}

@mixin rem2px($attr: width, $size: 16, $rest...) {
  #{$attr}: _rem2px(rem, $size, $rest...);
}

@function _pt2px($unit, $rest...){
  $result: ();
  @each $i in $rest {
      $result: append($result, unit($i * 1.333333, $unit));
  }
  @return $result;
}

@mixin pt2px($attr: width, $size: 16, $rest...) {
  #{$attr}: _pt2px(rem, $size, $rest...);
}

@function _px2pt($unit, $rest...){
  $result: ();
  @each $i in $rest {
      $result: append($result, unit(0.75 * $i, $unit));
  }
  @return $result;
}

@mixin px2pt($attr: width, $size: 16, $rest...) {
  #{$attr}: _px2pt(rem, $size, $rest...);
}

@function _pt2rem($unit, $rest...){
  $result: ();
  @each $i in $rest {
      $result: append($result, unit($i * 1.333333 / 16, $unit));
  }
  @return $result;
}

@mixin pt2rem($attr: width, $size: 16, $rest...) {
  #{$attr}: _pt2rem(rem, $size, $rest...);
}

@function _rem2pt($unit, $rest...){
  $result: ();
  @each $i in $rest {
      $result: append($result, unit(0.75 * 16 * $i, $unit));
  }
  @return $result;
}

@mixin rem2pt($attr: width, $size: 16, $rest...) {
  #{$attr}: _rem2pt(rem, $size, $rest...);
}

@mixin square($size: 0, $unit: 'px') {
  width: unit($size, $unit);
  height: unit($size, $unit);
}

@mixin circle($size: 0, $unit: 'px') {
  width: unit($size, $unit);
  height: unit($size, $unit);
  border-radius: 50%;
}

@mixin halo() {
  &::after {
    display: block;
    content: '';
    position: absolute;
    @include circle(3.125, rem);
    background-color: rgba(187, 187, 187, 0.5);
    opacity: 0.3;
    top: 50%;
    left: 50%;
    @include px2rem(margin-top, -25px);
    @include px2rem(margin-left, -25px);
  }
}

@mixin animate($params) {
  animation: $params;
}

@mixin transition-scheme($t) {
  transition: $t;
}

@mixin collapse() {
  overflow: hidden;
  max-height: 0;
  transition: $transition-collapse;
  position: relative;
}

@mixin expand() {
  max-height: 1000px !important;
  transition: $transition-collapse !important;
  transition-duration: 1s !important;
  overflow: visible !important;
}

@mixin perspective($perspective) {
  transform: perspective($perspective);
}
@mixin rotate($degrees) {
  transform: rotate($degrees);
}
@mixin rotateX($degrees) {
  transform: rotateX($degrees);
}
@mixin rotateY($degrees) {
  transform: rotateY($degrees);
}
@mixin rotateZ($degrees) {
  transform: rotateZ($degrees);
}
@mixin scale($ratio) {
  transform: scale($ratio);
}
@mixin scaleX($ratio) {
  transform: scaleX($ratio);
}
@mixin scaleY($ratio) {
  transform: scaleY($ratio);
}
@mixin translate($x: 0, $y: 0) {
  transform: translate($x, $y);
}
@mixin skew($x: 0, $y: 0) {
  transform: skew($x, $y);
}
@mixin skewX($x: 0) {
  transform: skewX($x);
}
@mixin skewY($y: 0) {
  transform: skewY($y);
}
@mixin translate3d($x: 0, $y: 0, $z: 0) {
  transform: translate3d($x, $y, $z);
}

@mixin transformOrigin($origin) {
  transform-origin: $origin;
}

@mixin transition($time: 1s, $func: ease, $target: all) {
  transition: $target $time $func;
}

@mixin translateX($x: 0) {
  transform: translateX($x);
}
@mixin translateY($y: 0) {
  transform: translateY($y);
}

@mixin shadow($x, $y, $blur, $stretch, $color, $alpha: 0.4) {
  box-shadow: $x $y $blur $stretch rgba(red($color), green($color), blue($color), $alpha);
}

@mixin default-shadow() {
  //@include shadow(2px, 2px, 5px, 0, $black);
  box-shadow: 2px 2px 2px 0 rgba(red($ribbonDropdownShadow), green($ribbonDropdownShadow), blue($ribbonDropdownShadow), 0.7),
    -0.5px 0 1px 0 rgba(red($ribbonDropdownShadow), green($ribbonDropdownShadow), blue($ribbonDropdownShadow), 0.7);
}

@mixin win-shadow() {
  box-shadow: 0 0 5px 0 rgba(0, 0, 0, 0.3);
}

@mixin shadow($size) {
  @if ($size = 0) {
    box-shadow: none;
  }
  @if ($size = 1) {
    box-shadow: 0 2px 10px 0 rgba(0, 0, 0, 0.16), 0 2px 5px 0 rgba(0, 0, 0, 0.26);
  }

  @if ($size = 2) {
    box-shadow: 0 6px 20px 0 rgba(0, 0, 0, 0.19), 0 8px 17px 0 rgba(0, 0, 0, 0.2);
  }

  @if ($size = 3) {
    box-shadow: 0 17px 50px 0 rgba(0, 0, 0, 0.19), 0 12px 15px 0 rgba(0, 0, 0, 0.24);
  }

  @if ($size = 4) {
    box-shadow: 0 25px 55px 0 rgba(0, 0, 0, 0.21), 0 16px 28px 0 rgba(0, 0, 0, 0.22);
  }

  @if ($size = 5) {
    box-shadow: 0 40px 77px 0 rgba(0, 0, 0, 0.22), 0 27px 24px 0 rgba(0, 0, 0, 0.2);
  }
}

@mixin shadow-right() {
  box-shadow: 5px 0 7px -6px rgba(0, 0, 0, 0.75);
}

@mixin shadow-left() {
  box-shadow: -5px 0 7px -6px rgba(0, 0, 0, 0.75);
}

@mixin text-ellipsis() {
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
}

@mixin focus-show($color) {
  box-shadow: 0 0 0 3px rgba(red($color), green($color), blue($color), 0.45);
}

@mixin neb($size: 1rem, $shift: 0.625rem) {
  &::before {
    display: block;
    position: absolute;
    content: '';
    width: $size;
    height: $size;
    background-color: inherit;
    border: 1px solid transparent;
    border-right-color: inherit;
    border-bottom-color: inherit;
  }

  &.neb-s {
    &::before {
      top: 100%;
      left: 50%;
      @include translateX(-50%);
      @include translateY(-50%);
      @include rotate(45deg);
    }
  }

  &.neb-sw {
    &::before {
      top: 100%;
      left: $shift;
      @include translateY(-50%);
      @include rotate(45deg);
    }
  }

  &.neb-se {
    &::before {
      top: 100%;
      right: $shift;
      @include translateY(-50%);
      @include rotate(45deg);
    }
  }

  &.neb-n {
    &::before {
      top: 0;
      left: 50%;
      @include translateX(-50%);
      @include translateY(-50%);
      @include rotate(-135deg);
    }
  }

  &.neb-nw {
    &::before {
      top: 0;
      left: $shift;
      @include translateY(-50%);
      @include rotate(-135deg);
    }
  }

  &.neb-ne {
    &::before {
      top: 0;
      right: $shift;
      @include translateY(-50%);
      @include rotate(-135deg);
    }
  }

  &.neb-en {
    &::before {
      top: $shift;
      right: 0;
      @include translateX(50%);
      @include rotate(-45deg);
    }
  }

  &.neb-e {
    &::before {
      top: 50%;
      right: 0;
      @include translateX(50%);
      @include translateY(-50%);
      @include rotate(-45deg);
    }
  }

  &.neb-es {
    &::before {
      bottom: $shift;
      right: 0;
      @include translateX(50%);
      @include rotate(-45deg);
    }
  }

  &.neb-wn {
    &::before {
      top: $shift;
      left: 0;
      @include translateX(-50%);
      @include rotate(135deg);
    }
  }

  &.neb-w {
    &::before {
      top: 50%;
      left: 0;
      @include translateX(-50%);
      @include translateY(-50%);
      @include rotate(135deg);
    }
  }

  &.neb-ws {
    &::before {
      bottom: $shift;
      left: 0;
      @include translateX(-50%);
      @include rotate(135deg);
    }
  }
}

@mixin neb2($size: 1rem, $shift: 0.625rem, $color: $white) {
  &::before {
    display: block;
    content: '';
    width: 0;
    height: 0;
    border-style: solid;
    position: absolute;
  }

  &.neb-s {
    &::before {
      border-width: $size $size 0 $size;
      border-color: $color transparent transparent transparent;
      top: 100%;
      left: 50%;
      @include translateX(-50%);
      @include translateY(-50%);
    }
  }

  &.neb-n {
    &::before {
      border-width: 0 $size $size $size;
      border-color: transparent transparent $color transparent;
      top: 0;
      left: 50%;
      @include translateX(-50%);
      @include translateY(-50%);
    }
  }

  &.neb-e {
    &::before {
      border-width: $size 0 $size $size;
      border-color: transparent transparent transparent $color;
      top: 50%;
      right: 0;
      @include translateX(50%);
      @include translateY(-50%);
    }
  }

  &.neb-w {
    &::before {
      border-width: $size $size $size 0;
      border-color: transparent $color transparent transparent;
      top: 50%;
      left: 0;
      @include translateX(-50%);
      @include translateY(-50%);
    }
  }
}

@mixin toggle() {
  position: relative;
  cursor: pointer;
  padding-right: 1.5rem;
  user-select: none;

  &::before {
    display: block;
    position: absolute;
    vertical-align: middle;
    color: transparent;
    font-size: 0;
    content: '';
    @include px2rem(height, 5px);
    @include px2rem(width, 5px);
    background-color: $transparent;
    border-left: 1px solid;
    border-bottom: 1px solid;
    border-color: $dark;
    top: 50%;
    left: 100%;
    margin-left: -1rem;
    margin-top: -0.1625rem;
    z-index: 2;
    transform: rotate(-45deg);
    transition: $transition-short;
    transform-origin: center center 1px;
  }
}

@mixin hideElement($el) {
  #{$el} {
    width: 1px;
    height: 1px;
    position: absolute;
    top: 0;
    left: 0;
    opacity: 0;
  }
}

@mixin hideScrollBars() {
  &::-webkit-scrollbar {
    display: none !important;
  }
  -ms-overflow-style: -ms-autohiding-scrollbar;
  overflow: -moz-scrollbars-none;
}
